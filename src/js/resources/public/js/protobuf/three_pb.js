// source: three.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var euclid_pb = require('./euclid_pb.js');
goog.object.extend(proto, euclid_pb);
goog.exportSymbol('proto.protobuf.BoxGeometry', null, global);
goog.exportSymbol('proto.protobuf.Color', null, global);
goog.exportSymbol('proto.protobuf.ConeGeometry', null, global);
goog.exportSymbol('proto.protobuf.CylinderGeometry', null, global);
goog.exportSymbol('proto.protobuf.Mesh', null, global);
goog.exportSymbol('proto.protobuf.MeshGroup', null, global);
goog.exportSymbol('proto.protobuf.ModelFileGeometry', null, global);
goog.exportSymbol('proto.protobuf.ModelFileGeometry.SubMesh', null, global);
goog.exportSymbol('proto.protobuf.SphereGeometry', null, global);
goog.exportSymbol('proto.protobuf.TorusGeometry', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.Color.displayName = 'proto.protobuf.Color';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.BoxGeometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.BoxGeometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.BoxGeometry.displayName = 'proto.protobuf.BoxGeometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.ConeGeometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.ConeGeometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.ConeGeometry.displayName = 'proto.protobuf.ConeGeometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.CylinderGeometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.CylinderGeometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.CylinderGeometry.displayName = 'proto.protobuf.CylinderGeometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.SphereGeometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.SphereGeometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.SphereGeometry.displayName = 'proto.protobuf.SphereGeometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.TorusGeometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.TorusGeometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.TorusGeometry.displayName = 'proto.protobuf.TorusGeometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.ModelFileGeometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.ModelFileGeometry.repeatedFields_, null);
};
goog.inherits(proto.protobuf.ModelFileGeometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.ModelFileGeometry.displayName = 'proto.protobuf.ModelFileGeometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.ModelFileGeometry.SubMesh = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.ModelFileGeometry.SubMesh, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.ModelFileGeometry.SubMesh.displayName = 'proto.protobuf.ModelFileGeometry.SubMesh';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.Mesh = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.Mesh, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.Mesh.displayName = 'proto.protobuf.Mesh';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.MeshGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.MeshGroup.repeatedFields_, null);
};
goog.inherits(proto.protobuf.MeshGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.MeshGroup.displayName = 'proto.protobuf.MeshGroup';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.Color.toObject = function(includeInstance, msg) {
  var f, obj = {
    rgba: jspb.Message.getFieldWithDefault(msg, 1, 0),
    webcolor: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.Color}
 */
proto.protobuf.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.Color;
  return proto.protobuf.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.Color}
 */
proto.protobuf.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRgba(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebcolor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRgba();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWebcolor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 rgba = 1;
 * @return {number}
 */
proto.protobuf.Color.prototype.getRgba = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.Color} returns this
 */
proto.protobuf.Color.prototype.setRgba = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string webcolor = 2;
 * @return {string}
 */
proto.protobuf.Color.prototype.getWebcolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protobuf.Color} returns this
 */
proto.protobuf.Color.prototype.setWebcolor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.BoxGeometry.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.BoxGeometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.BoxGeometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.BoxGeometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: (f = msg.getSize()) && euclid_pb.Vector3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.BoxGeometry}
 */
proto.protobuf.BoxGeometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.BoxGeometry;
  return proto.protobuf.BoxGeometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.BoxGeometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.BoxGeometry}
 */
proto.protobuf.BoxGeometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new euclid_pb.Vector3D;
      reader.readMessage(value,euclid_pb.Vector3D.deserializeBinaryFromReader);
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.BoxGeometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.BoxGeometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.BoxGeometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.BoxGeometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      euclid_pb.Vector3D.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vector3D size = 1;
 * @return {?proto.protobuf.Vector3D}
 */
proto.protobuf.BoxGeometry.prototype.getSize = function() {
  return /** @type{?proto.protobuf.Vector3D} */ (
    jspb.Message.getWrapperField(this, euclid_pb.Vector3D, 1));
};


/**
 * @param {?proto.protobuf.Vector3D|undefined} value
 * @return {!proto.protobuf.BoxGeometry} returns this
*/
proto.protobuf.BoxGeometry.prototype.setSize = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.BoxGeometry} returns this
 */
proto.protobuf.BoxGeometry.prototype.clearSize = function() {
  return this.setSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.BoxGeometry.prototype.hasSize = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.ConeGeometry.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.ConeGeometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.ConeGeometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ConeGeometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    radialSegments: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.ConeGeometry}
 */
proto.protobuf.ConeGeometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.ConeGeometry;
  return proto.protobuf.ConeGeometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.ConeGeometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.ConeGeometry}
 */
proto.protobuf.ConeGeometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadius(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRadialSegments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.ConeGeometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.ConeGeometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.ConeGeometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ConeGeometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getRadialSegments();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional double radius = 1;
 * @return {number}
 */
proto.protobuf.ConeGeometry.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.ConeGeometry} returns this
 */
proto.protobuf.ConeGeometry.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double height = 2;
 * @return {number}
 */
proto.protobuf.ConeGeometry.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.ConeGeometry} returns this
 */
proto.protobuf.ConeGeometry.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 radial_segments = 3;
 * @return {number}
 */
proto.protobuf.ConeGeometry.prototype.getRadialSegments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.ConeGeometry} returns this
 */
proto.protobuf.ConeGeometry.prototype.setRadialSegments = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.CylinderGeometry.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.CylinderGeometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.CylinderGeometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.CylinderGeometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    radiusTop: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    radiusBottom: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    radialSegments: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.CylinderGeometry}
 */
proto.protobuf.CylinderGeometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.CylinderGeometry;
  return proto.protobuf.CylinderGeometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.CylinderGeometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.CylinderGeometry}
 */
proto.protobuf.CylinderGeometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadiusTop(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadiusBottom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRadialSegments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.CylinderGeometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.CylinderGeometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.CylinderGeometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.CylinderGeometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRadiusTop();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getRadiusBottom();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getRadialSegments();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional double radius_top = 1;
 * @return {number}
 */
proto.protobuf.CylinderGeometry.prototype.getRadiusTop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CylinderGeometry} returns this
 */
proto.protobuf.CylinderGeometry.prototype.setRadiusTop = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double radius_bottom = 2;
 * @return {number}
 */
proto.protobuf.CylinderGeometry.prototype.getRadiusBottom = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CylinderGeometry} returns this
 */
proto.protobuf.CylinderGeometry.prototype.setRadiusBottom = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double height = 3;
 * @return {number}
 */
proto.protobuf.CylinderGeometry.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CylinderGeometry} returns this
 */
proto.protobuf.CylinderGeometry.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int32 radial_segments = 4;
 * @return {number}
 */
proto.protobuf.CylinderGeometry.prototype.getRadialSegments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CylinderGeometry} returns this
 */
proto.protobuf.CylinderGeometry.prototype.setRadialSegments = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.SphereGeometry.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.SphereGeometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.SphereGeometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.SphereGeometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    widthSegments: jspb.Message.getFieldWithDefault(msg, 2, 0),
    heightSegments: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.SphereGeometry}
 */
proto.protobuf.SphereGeometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.SphereGeometry;
  return proto.protobuf.SphereGeometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.SphereGeometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.SphereGeometry}
 */
proto.protobuf.SphereGeometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadius(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidthSegments(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeightSegments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.SphereGeometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.SphereGeometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.SphereGeometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.SphereGeometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getWidthSegments();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHeightSegments();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional double radius = 1;
 * @return {number}
 */
proto.protobuf.SphereGeometry.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.SphereGeometry} returns this
 */
proto.protobuf.SphereGeometry.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int32 width_segments = 2;
 * @return {number}
 */
proto.protobuf.SphereGeometry.prototype.getWidthSegments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.SphereGeometry} returns this
 */
proto.protobuf.SphereGeometry.prototype.setWidthSegments = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 height_segments = 3;
 * @return {number}
 */
proto.protobuf.SphereGeometry.prototype.getHeightSegments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.SphereGeometry} returns this
 */
proto.protobuf.SphereGeometry.prototype.setHeightSegments = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.TorusGeometry.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.TorusGeometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.TorusGeometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.TorusGeometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    radius: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    tube: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    radialSegments: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tubularSegments: jspb.Message.getFieldWithDefault(msg, 4, 0),
    arc: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.TorusGeometry}
 */
proto.protobuf.TorusGeometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.TorusGeometry;
  return proto.protobuf.TorusGeometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.TorusGeometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.TorusGeometry}
 */
proto.protobuf.TorusGeometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRadius(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTube(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRadialSegments(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTubularSegments(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setArc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.TorusGeometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.TorusGeometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.TorusGeometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.TorusGeometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRadius();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getTube();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getRadialSegments();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTubularSegments();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getArc();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional double radius = 1;
 * @return {number}
 */
proto.protobuf.TorusGeometry.prototype.getRadius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.TorusGeometry} returns this
 */
proto.protobuf.TorusGeometry.prototype.setRadius = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double tube = 2;
 * @return {number}
 */
proto.protobuf.TorusGeometry.prototype.getTube = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.TorusGeometry} returns this
 */
proto.protobuf.TorusGeometry.prototype.setTube = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 radial_segments = 3;
 * @return {number}
 */
proto.protobuf.TorusGeometry.prototype.getRadialSegments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.TorusGeometry} returns this
 */
proto.protobuf.TorusGeometry.prototype.setRadialSegments = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 tubular_segments = 4;
 * @return {number}
 */
proto.protobuf.TorusGeometry.prototype.getTubularSegments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.TorusGeometry} returns this
 */
proto.protobuf.TorusGeometry.prototype.setTubularSegments = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double arc = 5;
 * @return {number}
 */
proto.protobuf.TorusGeometry.prototype.getArc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.TorusGeometry} returns this
 */
proto.protobuf.TorusGeometry.prototype.setArc = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.ModelFileGeometry.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.ModelFileGeometry.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.ModelFileGeometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.ModelFileGeometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ModelFileGeometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    submeshesList: jspb.Message.toObjectList(msg.getSubmeshesList(),
    proto.protobuf.ModelFileGeometry.SubMesh.toObject, includeInstance),
    resourceDirectoriesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    scale: (f = msg.getScale()) && euclid_pb.Vector3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.ModelFileGeometry}
 */
proto.protobuf.ModelFileGeometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.ModelFileGeometry;
  return proto.protobuf.ModelFileGeometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.ModelFileGeometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.ModelFileGeometry}
 */
proto.protobuf.ModelFileGeometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = new proto.protobuf.ModelFileGeometry.SubMesh;
      reader.readMessage(value,proto.protobuf.ModelFileGeometry.SubMesh.deserializeBinaryFromReader);
      msg.addSubmeshes(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addResourceDirectories(value);
      break;
    case 4:
      var value = new euclid_pb.Vector3D;
      reader.readMessage(value,euclid_pb.Vector3D.deserializeBinaryFromReader);
      msg.setScale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.ModelFileGeometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.ModelFileGeometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.ModelFileGeometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ModelFileGeometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubmeshesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.protobuf.ModelFileGeometry.SubMesh.serializeBinaryToWriter
    );
  }
  f = message.getResourceDirectoriesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getScale();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      euclid_pb.Vector3D.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.ModelFileGeometry.SubMesh.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.ModelFileGeometry.SubMesh.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.ModelFileGeometry.SubMesh} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ModelFileGeometry.SubMesh.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    center: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.ModelFileGeometry.SubMesh}
 */
proto.protobuf.ModelFileGeometry.SubMesh.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.ModelFileGeometry.SubMesh;
  return proto.protobuf.ModelFileGeometry.SubMesh.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.ModelFileGeometry.SubMesh} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.ModelFileGeometry.SubMesh}
 */
proto.protobuf.ModelFileGeometry.SubMesh.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCenter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.ModelFileGeometry.SubMesh.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.ModelFileGeometry.SubMesh.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.ModelFileGeometry.SubMesh} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ModelFileGeometry.SubMesh.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCenter();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.protobuf.ModelFileGeometry.SubMesh.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protobuf.ModelFileGeometry.SubMesh} returns this
 */
proto.protobuf.ModelFileGeometry.SubMesh.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool center = 2;
 * @return {boolean}
 */
proto.protobuf.ModelFileGeometry.SubMesh.prototype.getCenter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protobuf.ModelFileGeometry.SubMesh} returns this
 */
proto.protobuf.ModelFileGeometry.SubMesh.prototype.setCenter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string filename = 1;
 * @return {string}
 */
proto.protobuf.ModelFileGeometry.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protobuf.ModelFileGeometry} returns this
 */
proto.protobuf.ModelFileGeometry.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated SubMesh submeshes = 2;
 * @return {!Array<!proto.protobuf.ModelFileGeometry.SubMesh>}
 */
proto.protobuf.ModelFileGeometry.prototype.getSubmeshesList = function() {
  return /** @type{!Array<!proto.protobuf.ModelFileGeometry.SubMesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.ModelFileGeometry.SubMesh, 2));
};


/**
 * @param {!Array<!proto.protobuf.ModelFileGeometry.SubMesh>} value
 * @return {!proto.protobuf.ModelFileGeometry} returns this
*/
proto.protobuf.ModelFileGeometry.prototype.setSubmeshesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.protobuf.ModelFileGeometry.SubMesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.ModelFileGeometry.SubMesh}
 */
proto.protobuf.ModelFileGeometry.prototype.addSubmeshes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protobuf.ModelFileGeometry.SubMesh, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protobuf.ModelFileGeometry} returns this
 */
proto.protobuf.ModelFileGeometry.prototype.clearSubmeshesList = function() {
  return this.setSubmeshesList([]);
};


/**
 * repeated string resource_directories = 3;
 * @return {!Array<string>}
 */
proto.protobuf.ModelFileGeometry.prototype.getResourceDirectoriesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.protobuf.ModelFileGeometry} returns this
 */
proto.protobuf.ModelFileGeometry.prototype.setResourceDirectoriesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.protobuf.ModelFileGeometry} returns this
 */
proto.protobuf.ModelFileGeometry.prototype.addResourceDirectories = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protobuf.ModelFileGeometry} returns this
 */
proto.protobuf.ModelFileGeometry.prototype.clearResourceDirectoriesList = function() {
  return this.setResourceDirectoriesList([]);
};


/**
 * optional Vector3D scale = 4;
 * @return {?proto.protobuf.Vector3D}
 */
proto.protobuf.ModelFileGeometry.prototype.getScale = function() {
  return /** @type{?proto.protobuf.Vector3D} */ (
    jspb.Message.getWrapperField(this, euclid_pb.Vector3D, 4));
};


/**
 * @param {?proto.protobuf.Vector3D|undefined} value
 * @return {!proto.protobuf.ModelFileGeometry} returns this
*/
proto.protobuf.ModelFileGeometry.prototype.setScale = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.ModelFileGeometry} returns this
 */
proto.protobuf.ModelFileGeometry.prototype.clearScale = function() {
  return this.setScale(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.ModelFileGeometry.prototype.hasScale = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.Mesh.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.Mesh.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.Mesh} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.Mesh.toObject = function(includeInstance, msg) {
  var f, obj = {
    meshId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pose: (f = msg.getPose()) && euclid_pb.Pose3D.toObject(includeInstance, f),
    boxgeometry: (f = msg.getBoxgeometry()) && proto.protobuf.BoxGeometry.toObject(includeInstance, f),
    conegeometry: (f = msg.getConegeometry()) && proto.protobuf.ConeGeometry.toObject(includeInstance, f),
    cylindergeometry: (f = msg.getCylindergeometry()) && proto.protobuf.CylinderGeometry.toObject(includeInstance, f),
    spheregeometry: (f = msg.getSpheregeometry()) && proto.protobuf.SphereGeometry.toObject(includeInstance, f),
    torusgeometry: (f = msg.getTorusgeometry()) && proto.protobuf.TorusGeometry.toObject(includeInstance, f),
    modelfilegeometry: (f = msg.getModelfilegeometry()) && proto.protobuf.ModelFileGeometry.toObject(includeInstance, f),
    color: (f = msg.getColor()) && proto.protobuf.Color.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.Mesh}
 */
proto.protobuf.Mesh.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.Mesh;
  return proto.protobuf.Mesh.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.Mesh} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.Mesh}
 */
proto.protobuf.Mesh.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeshId(value);
      break;
    case 2:
      var value = new euclid_pb.Pose3D;
      reader.readMessage(value,euclid_pb.Pose3D.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    case 3:
      var value = new proto.protobuf.BoxGeometry;
      reader.readMessage(value,proto.protobuf.BoxGeometry.deserializeBinaryFromReader);
      msg.setBoxgeometry(value);
      break;
    case 4:
      var value = new proto.protobuf.ConeGeometry;
      reader.readMessage(value,proto.protobuf.ConeGeometry.deserializeBinaryFromReader);
      msg.setConegeometry(value);
      break;
    case 5:
      var value = new proto.protobuf.CylinderGeometry;
      reader.readMessage(value,proto.protobuf.CylinderGeometry.deserializeBinaryFromReader);
      msg.setCylindergeometry(value);
      break;
    case 6:
      var value = new proto.protobuf.SphereGeometry;
      reader.readMessage(value,proto.protobuf.SphereGeometry.deserializeBinaryFromReader);
      msg.setSpheregeometry(value);
      break;
    case 7:
      var value = new proto.protobuf.TorusGeometry;
      reader.readMessage(value,proto.protobuf.TorusGeometry.deserializeBinaryFromReader);
      msg.setTorusgeometry(value);
      break;
    case 8:
      var value = new proto.protobuf.ModelFileGeometry;
      reader.readMessage(value,proto.protobuf.ModelFileGeometry.deserializeBinaryFromReader);
      msg.setModelfilegeometry(value);
      break;
    case 9:
      var value = new proto.protobuf.Color;
      reader.readMessage(value,proto.protobuf.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.Mesh.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.Mesh.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.Mesh} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.Mesh.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeshId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      euclid_pb.Pose3D.serializeBinaryToWriter
    );
  }
  f = message.getBoxgeometry();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protobuf.BoxGeometry.serializeBinaryToWriter
    );
  }
  f = message.getConegeometry();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protobuf.ConeGeometry.serializeBinaryToWriter
    );
  }
  f = message.getCylindergeometry();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.protobuf.CylinderGeometry.serializeBinaryToWriter
    );
  }
  f = message.getSpheregeometry();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.protobuf.SphereGeometry.serializeBinaryToWriter
    );
  }
  f = message.getTorusgeometry();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.protobuf.TorusGeometry.serializeBinaryToWriter
    );
  }
  f = message.getModelfilegeometry();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.protobuf.ModelFileGeometry.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.protobuf.Color.serializeBinaryToWriter
    );
  }
};


/**
 * optional string mesh_id = 1;
 * @return {string}
 */
proto.protobuf.Mesh.prototype.getMeshId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protobuf.Mesh} returns this
 */
proto.protobuf.Mesh.prototype.setMeshId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Pose3D pose = 2;
 * @return {?proto.protobuf.Pose3D}
 */
proto.protobuf.Mesh.prototype.getPose = function() {
  return /** @type{?proto.protobuf.Pose3D} */ (
    jspb.Message.getWrapperField(this, euclid_pb.Pose3D, 2));
};


/**
 * @param {?proto.protobuf.Pose3D|undefined} value
 * @return {!proto.protobuf.Mesh} returns this
*/
proto.protobuf.Mesh.prototype.setPose = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.Mesh} returns this
 */
proto.protobuf.Mesh.prototype.clearPose = function() {
  return this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.Mesh.prototype.hasPose = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BoxGeometry boxGeometry = 3;
 * @return {?proto.protobuf.BoxGeometry}
 */
proto.protobuf.Mesh.prototype.getBoxgeometry = function() {
  return /** @type{?proto.protobuf.BoxGeometry} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.BoxGeometry, 3));
};


/**
 * @param {?proto.protobuf.BoxGeometry|undefined} value
 * @return {!proto.protobuf.Mesh} returns this
*/
proto.protobuf.Mesh.prototype.setBoxgeometry = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.Mesh} returns this
 */
proto.protobuf.Mesh.prototype.clearBoxgeometry = function() {
  return this.setBoxgeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.Mesh.prototype.hasBoxgeometry = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ConeGeometry coneGeometry = 4;
 * @return {?proto.protobuf.ConeGeometry}
 */
proto.protobuf.Mesh.prototype.getConegeometry = function() {
  return /** @type{?proto.protobuf.ConeGeometry} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.ConeGeometry, 4));
};


/**
 * @param {?proto.protobuf.ConeGeometry|undefined} value
 * @return {!proto.protobuf.Mesh} returns this
*/
proto.protobuf.Mesh.prototype.setConegeometry = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.Mesh} returns this
 */
proto.protobuf.Mesh.prototype.clearConegeometry = function() {
  return this.setConegeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.Mesh.prototype.hasConegeometry = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CylinderGeometry cylinderGeometry = 5;
 * @return {?proto.protobuf.CylinderGeometry}
 */
proto.protobuf.Mesh.prototype.getCylindergeometry = function() {
  return /** @type{?proto.protobuf.CylinderGeometry} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.CylinderGeometry, 5));
};


/**
 * @param {?proto.protobuf.CylinderGeometry|undefined} value
 * @return {!proto.protobuf.Mesh} returns this
*/
proto.protobuf.Mesh.prototype.setCylindergeometry = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.Mesh} returns this
 */
proto.protobuf.Mesh.prototype.clearCylindergeometry = function() {
  return this.setCylindergeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.Mesh.prototype.hasCylindergeometry = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SphereGeometry sphereGeometry = 6;
 * @return {?proto.protobuf.SphereGeometry}
 */
proto.protobuf.Mesh.prototype.getSpheregeometry = function() {
  return /** @type{?proto.protobuf.SphereGeometry} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.SphereGeometry, 6));
};


/**
 * @param {?proto.protobuf.SphereGeometry|undefined} value
 * @return {!proto.protobuf.Mesh} returns this
*/
proto.protobuf.Mesh.prototype.setSpheregeometry = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.Mesh} returns this
 */
proto.protobuf.Mesh.prototype.clearSpheregeometry = function() {
  return this.setSpheregeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.Mesh.prototype.hasSpheregeometry = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TorusGeometry torusGeometry = 7;
 * @return {?proto.protobuf.TorusGeometry}
 */
proto.protobuf.Mesh.prototype.getTorusgeometry = function() {
  return /** @type{?proto.protobuf.TorusGeometry} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.TorusGeometry, 7));
};


/**
 * @param {?proto.protobuf.TorusGeometry|undefined} value
 * @return {!proto.protobuf.Mesh} returns this
*/
proto.protobuf.Mesh.prototype.setTorusgeometry = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.Mesh} returns this
 */
proto.protobuf.Mesh.prototype.clearTorusgeometry = function() {
  return this.setTorusgeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.Mesh.prototype.hasTorusgeometry = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ModelFileGeometry modelFileGeometry = 8;
 * @return {?proto.protobuf.ModelFileGeometry}
 */
proto.protobuf.Mesh.prototype.getModelfilegeometry = function() {
  return /** @type{?proto.protobuf.ModelFileGeometry} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.ModelFileGeometry, 8));
};


/**
 * @param {?proto.protobuf.ModelFileGeometry|undefined} value
 * @return {!proto.protobuf.Mesh} returns this
*/
proto.protobuf.Mesh.prototype.setModelfilegeometry = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.Mesh} returns this
 */
proto.protobuf.Mesh.prototype.clearModelfilegeometry = function() {
  return this.setModelfilegeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.Mesh.prototype.hasModelfilegeometry = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Color color = 9;
 * @return {?proto.protobuf.Color}
 */
proto.protobuf.Mesh.prototype.getColor = function() {
  return /** @type{?proto.protobuf.Color} */ (
    jspb.Message.getWrapperField(this, proto.protobuf.Color, 9));
};


/**
 * @param {?proto.protobuf.Color|undefined} value
 * @return {!proto.protobuf.Mesh} returns this
*/
proto.protobuf.Mesh.prototype.setColor = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.Mesh} returns this
 */
proto.protobuf.Mesh.prototype.clearColor = function() {
  return this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.Mesh.prototype.hasColor = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.MeshGroup.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.MeshGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.MeshGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.MeshGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.MeshGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pose: (f = msg.getPose()) && euclid_pb.Pose3D.toObject(includeInstance, f),
    meshesList: jspb.Message.toObjectList(msg.getMeshesList(),
    proto.protobuf.Mesh.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.MeshGroup}
 */
proto.protobuf.MeshGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.MeshGroup;
  return proto.protobuf.MeshGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.MeshGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.MeshGroup}
 */
proto.protobuf.MeshGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    case 2:
      var value = new euclid_pb.Pose3D;
      reader.readMessage(value,euclid_pb.Pose3D.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    case 3:
      var value = new proto.protobuf.Mesh;
      reader.readMessage(value,proto.protobuf.Mesh.deserializeBinaryFromReader);
      msg.addMeshes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.MeshGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.MeshGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.MeshGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.MeshGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPose();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      euclid_pb.Pose3D.serializeBinaryToWriter
    );
  }
  f = message.getMeshesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.protobuf.Mesh.serializeBinaryToWriter
    );
  }
};


/**
 * optional string group_id = 1;
 * @return {string}
 */
proto.protobuf.MeshGroup.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protobuf.MeshGroup} returns this
 */
proto.protobuf.MeshGroup.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Pose3D pose = 2;
 * @return {?proto.protobuf.Pose3D}
 */
proto.protobuf.MeshGroup.prototype.getPose = function() {
  return /** @type{?proto.protobuf.Pose3D} */ (
    jspb.Message.getWrapperField(this, euclid_pb.Pose3D, 2));
};


/**
 * @param {?proto.protobuf.Pose3D|undefined} value
 * @return {!proto.protobuf.MeshGroup} returns this
*/
proto.protobuf.MeshGroup.prototype.setPose = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protobuf.MeshGroup} returns this
 */
proto.protobuf.MeshGroup.prototype.clearPose = function() {
  return this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.MeshGroup.prototype.hasPose = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Mesh meshes = 3;
 * @return {!Array<!proto.protobuf.Mesh>}
 */
proto.protobuf.MeshGroup.prototype.getMeshesList = function() {
  return /** @type{!Array<!proto.protobuf.Mesh>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.Mesh, 3));
};


/**
 * @param {!Array<!proto.protobuf.Mesh>} value
 * @return {!proto.protobuf.MeshGroup} returns this
*/
proto.protobuf.MeshGroup.prototype.setMeshesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.protobuf.Mesh=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.Mesh}
 */
proto.protobuf.MeshGroup.prototype.addMeshes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.protobuf.Mesh, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protobuf.MeshGroup} returns this
 */
proto.protobuf.MeshGroup.prototype.clearMeshesList = function() {
  return this.setMeshesList([]);
};


goog.object.extend(exports, proto.protobuf);
